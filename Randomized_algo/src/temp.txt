import java.util.Random;

public class MedianFinder {
    public static double findMedian(int[] nums) {
        return findMedianHelper(nums, 0, nums.length - 1);
    }

    private static double findMedianHelper(int[] nums, int left, int right) {
        if (left == right) {
            return nums[left];
        }

        int pivotIndex = partition(nums, left, right);

        if (pivotIndex == nums.length / 2) {
            return nums[pivotIndex];
        } else if (pivotIndex > nums.length / 2) {
            return findMedianHelper(nums, left, pivotIndex - 1);
        } else {
            return findMedianHelper(nums, pivotIndex + 1, right);
        }
    }

    private static int partition(int[] nums, int left, int right) {
        int pivotIndex = new Random().nextInt(right - left + 1) + left;
        swap(nums, pivotIndex, right);

        int pivot = nums[right];
        int i = left;

        for (int j = left; j < right; j++) {
            if (nums[j] < pivot) {
                swap(nums, i, j);
                i++;
            }
        }

        swap(nums, i, right);
        return i;
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public static void main(String[] args) {
        int[] nums = {3, 1, 4, 2, 5};
        double median = findMedian(nums);
        System.out.println("Median: " + median);
    }
}